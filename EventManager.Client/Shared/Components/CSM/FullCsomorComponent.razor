<div class="csomor">
    <div class="filter">
        @if (!SelectedIsPerson)
        {
            <MudSelect T="string?" Value="Selected" ValueChanged="SelectedWorkChanged" Variant="Variant.Outlined" Label="Work filter">
                <MudSelectItem T="string" Value="null"></MudSelectItem>
                @foreach (var work in Settings.Works)
                {
                    <MudSelectItem T="string" Value="work.Id">@work.Name</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <MudSelect T="string?" Value="Selected" ValueChanged="SelectedPersonChanged" Variant="Variant.Outlined" Label="Person filter">
                <MudSelectItem T="string" Value="null"></MudSelectItem>
                @foreach (var person in Settings.Persons)
                {
                    <MudSelectItem T="string" Value="person.Id">@person.Name</MudSelectItem>
                }
            </MudSelect>
        }
        <span class="spacer"></span>
        <span>Is Personal table: <MudSwitch T="bool" Color="Color.Primary" Checked="SelectedIsPerson" CheckedChanged="TableStyleTypeChanged"></MudSwitch> </span>
    </div>
    <div class="table-row">
        <div class="element header interval">Full</div>
        @if (SelectedIsPerson)
        {
            @foreach (var person in Settings.Persons.OrderBy(x => x.Name))
            {
                @if (string.IsNullOrEmpty(Selected) || Selected == person.Id)
                {
                    <div class="element header">@person.Name</div>
                }
            }
        }
        else
        {
            @foreach (var work in Settings.Works.OrderBy(x => x.Name))
            {
                @if (string.IsNullOrEmpty(Selected) || Selected == work.Id)
                {
                    <div class="element header">@work.Name</div>
                }
            }
        }
    </div>

    @foreach (var row in Rows)
    {
        <div class="table-row">

            <div class="element interval @(ManagerAPI.Shared.Helpers.DateHelper.CompareDates(DateTime.UtcNow, row.Key) ? "current" : "") @(ManagerAPI.Shared.Helpers.DateHelper.CompareDates(DateTime.UtcNow.AddHours(1), row.Key) ? "next" : "")">@ManagerAPI.Shared.Helpers.WriteHelper.HourInterval(row.Key, 1)</div>

            @foreach (var element in row.Value)
            {
                @if (element != null)
                {
                    <MudTooltip Text="@element.Tooltip">
                        <MudText Typo="Typo.body1">
                            <div class="element @(HoveredMemberId == element.Id ? "hovered" : "") @(ManagerAPI.Shared.Helpers.DateHelper.CompareDates(DateTime.UtcNow, row.Key) ? "current" : "") @(ManagerAPI.Shared.Helpers.DateHelper.CompareDates(DateTime.UtcNow.AddHours(1), row.Key) ? "next" : "")" @onmouseover="@(() => Hover(element.Id))" @onmouseout="@(() => Hover(null))">@element.Name</div>
                        </MudText>
                    </MudTooltip>
                }
                else
                {
                    <div class="element">-</div>
                }
            }
        </div>
    }
</div>