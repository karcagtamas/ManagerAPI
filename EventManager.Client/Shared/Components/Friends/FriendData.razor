@using EventManager.Client.Services.Interfaces
@using ManagerAPI.Shared.DTOs
@using ManagerAPI.Shared.Helpers
@inject IModalService ModalService
@inject IFriendService FriendService

@if (IsLoading)
{
    <Loader></Loader>
}
else
{
    @if (Friend != null)
    {
        <div class="friend-data w-100">
            <div class="row col col-12">
                <div class="col col-12 col-md-6">
                    <div class="data-row">
                        <div>
                            <strong>User Name:</strong>
                        </div>
                        <div>
                            @Friend.UserName
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Email:</strong>
                        </div>
                        <div>
                            @Friend.Email
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Full Name:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.FullName)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Registration:</strong>
                        </div>
                        <div>
                            @DateHelper.DateToString(Friend.RegistrationDate)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Phone Number:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.PhoneNumber)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Birthday:</strong>
                        </div>
                        <div>
                            @DateHelper.DateToString(Friend.BirthDay)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Roles:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteList(Friend.Roles)
                        </div>
                    </div>
                </div>
                <div class="col col-12 col-md-6">
                    <div class="data-row">
                        <div>
                            <strong>TShirt Size:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.TShirtSize)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Allergy:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.Allergy)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Group:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.Group)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Gender:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.Gender)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>Country:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.Country)
                        </div>
                    </div>
                    <div class="data-row">
                        <div>
                            <strong>City:</strong>
                        </div>
                        <div>
                            @WriteHelper.WriteEmptyableField(Friend.City)
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <MatButton @onclick="RemoveFriend">Remove friend</MatButton>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">Friend cannot found</div>
    }
}

@code {
    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    [CascadingParameter]
    public BlazoredModal BlazoredModal { get; set; }

    protected bool ShowForm { get; set; } = true;
    protected int FormId { get; set; }
    protected string FriendId { get; set; }
    protected FriendDataDto Friend { get; set; }
    protected bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        FormId = Parameters.Get<int>("FormId");
        this.FriendId = Parameters.Get<string>("friend");

        await GetFriendData();
        this.BlazoredModal.SetTitle(this.Friend?.FullName);
    }

    protected async Task GetFriendData()
    {
        this.IsLoading = true;
        this.Friend = await FriendService.GetFriendData(this.FriendId);
        this.IsLoading = false;
    }

    protected async void RemoveFriend()
    {
        if (await FriendService.RemoveFriend(this.FriendId))
        {
            ModalService.Close(ModalResult.Ok<bool>(true));
        }
    }
}