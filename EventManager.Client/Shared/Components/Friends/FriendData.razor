@inject IModalService ModalService
@inject IFriendService FriendService
@using EventManager.Client.Services.Interfaces
@using EventManager.Client.Models
@using EventManager.Client.Shared.Components
@using EventManager.Client.Services


<div>
    <div>Friend data</div>
</div>

@code {
        [CascadingParameter]
        public ModalParameters Parameters { get; set; }

        [CascadingParameter]
        public BlazoredModal BlazoredModal { get; set; }

    protected bool ShowForm { get; set; } = true;
    protected int FormId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FormId = Parameters.Get<int>("FormId");

        ((ModalService)ModalService).OnConfirm += OnConfirm;

        // BlazoredModal.SetTitle("Form data");
        await GetFriendData();
    }

    protected async Task GetFriendData()
    {
        var a = await FriendService.GetMyFriendRequests();
    }

    protected void OnConfirm()
    {
        if (true)
        {
            ModalService.Close(ModalResult.Ok<string>("Result :D"));
            ((ModalService)ModalService).OnConfirm -= OnConfirm;
        }
    }
}