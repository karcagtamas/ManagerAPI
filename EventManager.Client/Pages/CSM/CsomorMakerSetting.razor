@page "/csomor"
@page "/csomor/{Id:int}"
@using ManagerAPI.Shared.Enums;

<div class="setting">
    <h1 class="em-page-title">
        Generator Settings
        @if (Id != null)
        {
            <span>
                #@Id -

                @if (Model != null)
                {
                    @Model.Title
                }
            </span>

        }
        else
        {
            @if (Model != null)
            {
                <span>- @Model.Title</span>
            }
        }
    </h1>
    <div class="action-bar">
        <MatTooltip Tooltip="Save">
            <MatIconButton RefBack="@context" Icon="done" @onclick="SaveSettings" Disabled="!CanSave()"></MatIconButton>
        </MatTooltip>
        <MatTooltip Tooltip="Generate">
            <MatIconButton RefBack="@context" Icon="miscellaneous_services" @onclick="Generate" Disabled="!CanGenerate()"></MatIconButton>
        </MatTooltip>
        @if (Settings != null)
        {
            @if (Settings.IsPublic != null && (bool)Settings.IsPublic)
            {
                <MatTooltip Tooltip="Hide">
                    <MatIconButton RefBack="@context" Icon="visibility_off" Disabled="Id == null || !CheckRole(CsomorRole.Owner, CsomorRole.Write)" @onclick="@(() => OpenConfirmDialog(false))"></MatIconButton>
                </MatTooltip>
            }
            @if (Settings.IsPublic != null && !(bool)Settings.IsPublic)
            {
                <MatTooltip Tooltip="Publish">
                    <MatIconButton RefBack="@context" Icon="visibility" Disabled="Id == null || !CheckRole(CsomorRole.Owner, CsomorRole.Write)" @onclick="@(() => OpenConfirmDialog(true))"></MatIconButton>
                </MatTooltip>
            }
        }
        <MatTooltip Tooltip="Export Xlsx">
            <MatIconButton RefBack="@context" Icon="arrow_circle_down" @onclick="ExportXls" Disabled="!CanExport()"></MatIconButton>
        </MatTooltip>
        <MatTooltip Tooltip="Export Pdf">
            <MatIconButton RefBack="@context" Icon="arrow_circle_down" @onclick="ExportPdf" Disabled="!CanExport()"></MatIconButton>
        </MatTooltip>
        <span class="spacer"></span>
        <MatTooltip Tooltip="Back to List">
            <MatIconButton RefBack="@context" Icon="arrow_left" @onclick="@(() => NavigationManager.NavigateTo("/csomors"))"></MatIconButton>
        </MatTooltip>
    </div>
    <div class="csomor">
        <MatTabGroup Class="tabs tab-group">
            @if (CheckRole(CsomorRole.Owner, CsomorRole.Write, CsomorRole.Read))
            {
                <MatTab Label="Settings">
                    <EditForm EditContext="Context">
                        <DataAnnotationsValidator />
                        <div class="input-row">
                            <MatTextField class="w-100" @bind-Value="Model.Title" Label="Title" Dense="true" Outlined="true" Disabled="CheckRole(CsomorRole.Read)"></MatTextField>
                            <ValidationMessage For="() => Model.Title" />
                        </div>
                        <div class="col col-12 row">
                            <div class="input-row col col-12 col-md-6">
                                <MatDatePicker class="w-100" Value="@Model.Start" ValueExpression="@(() => Model.Start)" TValue="DateTime" ValueChanged="@(date => ReSetup(date, "start"))" EnableTime="true" Enable24hours="true" AllowInput="false" Label="Start" Dense="true" Outlined="true" Disabled="CheckRole(CsomorRole.Read)"></MatDatePicker>
                                <ValidationMessage For="() => Model.Start" />
                            </div>
                            <div class="input-row col col-12 col-md-6">
                                <MatDatePicker class="w-100" Value="@Model.Finish" ValueExpression="@(() => Model.Finish)" TValue="DateTime" ValueChanged="@(date => ReSetup(date, "finish"))" EnableTime="true" Enable24hours="true" AllowInput="false" Label="Finish" Dense="true" Outlined="true" Disabled="CheckRole(CsomorRole.Read)"></MatDatePicker>
                                <ValidationMessage For="() => Model.Finish" />
                            </div>
                        </div>
                        <div class="col col-12 row">
                            <div class="input-row col col-12 col-md-6">
                                <MatNumericUpDownField class="w-100" @bind-Value="Model.MaxWorkHour" Label="Maximum Work Hour" Dense="true" Minimum="1" Maximum="8" Outlined="true" Disabled="CheckRole(CsomorRole.Read)"></MatNumericUpDownField>
                                <ValidationMessage For="() => Model.MaxWorkHour" />
                            </div>
                            <div class="input-row col col-12 col-md-6">
                                <MatNumericUpDownField class="w-100" @bind-Value="Model.MinRestHour" Label="Minimum Rest Hour" Dense="true" Minimum="1" Maximum="4" Outlined="true" Disabled="CheckRole(CsomorRole.Read)"></MatNumericUpDownField>
                                <ValidationMessage For="() => Model.MinRestHour" />
                            </div>
                        </div>
                    </EditForm>
                </MatTab>
                <MatTab Label="Person">
                    @if (CheckRole(CsomorRole.Owner, CsomorRole.Write))
                    {

                        <EditForm EditContext="PersonContext">
                            <DataAnnotationsValidator />
                            <div class="input-row">
                                <MatTextField class="w-100" @bind-Value="PersonModel.Name" Label="Name" Dense="true" Outlined="true"></MatTextField>
                                <ValidationMessage For="() => PersonModel.Name" />
                            </div>
                            <div class="action">
                                <span class="spacer"></span>
                                <MatButton Raised="true" @onclick="AddPerson">Add</MatButton>
                            </div>
                        </EditForm>
                    }
                    @if (Model.Persons.Count > 0)
                    {
                        <div class="list">
                            @foreach (var person in Model.Persons)
                            {
                                <PersonComponent Person="person" Works="Model.Works" RoleChecker="CheckRole" StateChanged="StateChanged" IsEditable="true"></PersonComponent>
                            }
                        </div>
                    }
                </MatTab>
                <MatTab Label="Works">
                    @if (CheckRole(CsomorRole.Owner, CsomorRole.Write))
                    {
                        <EditForm EditContext="WorkContext">
                            <DataAnnotationsValidator />
                            <div class="input-row">
                                <MatTextField class="w-100" @bind-Value="WorkModel.Name" Label="Name" Dense="true" Outlined="true"></MatTextField>
                                <ValidationMessage For="() => WorkModel.Name" />
                            </div>
                            <div class="action">
                                <span class="spacer"></span>
                                <MatButton Raised="true" @onclick="AddWork">Add</MatButton>
                            </div>
                        </EditForm>
                    }
                    @if (Model.Works.Count > 0)
                    {
                        <div class="list">
                            @foreach(var work in Model.Works)
                            {
                                <WorkComponent Work="work" RoleChecker="CheckRole" StateChanged="StateChanged" IsEditable="true"></WorkComponent>
                            }
                        </div>
                    }
                </MatTab>
            }
            @if (Model.HasGeneratedCsomor)
            {
                <MatTab Label="Csomor">
                    <CsomorComponent Settings="Settings" @bind-TableType="Type" @bind-FilterList="FilterList"></CsomorComponent>
                </MatTab>
            }
            @if (this.Id != null && CheckRole(CsomorRole.Owner))
            {
                <MatTab Label="Share">
                    <CsomorShareComponent Id="(int)Id"></CsomorShareComponent>
                </MatTab>
            }
        </MatTabGroup>
    </div>
</div>