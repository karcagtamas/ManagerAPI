// <auto-generated />
using System;
using ManagerAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagerAPI.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.DGtEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("Greeny")
                        .HasColumnType("int");

                    b.Property<decimal?>("GreenyCost")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("TShirtColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("DGtEvents");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.DSportEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Doctors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FixTeamCost")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal?>("FixTeamDeposit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<int?>("HelperLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Helpers")
                        .HasColumnType("int");

                    b.Property<int?>("Injured")
                        .HasColumnType("int");

                    b.Property<string>("MatchJudges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PlayerCost")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal?>("PlayerDeposit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<int?>("PlayerLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Players")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLimit")
                        .HasColumnType("int");

                    b.Property<decimal?>("VisitorCost")
                        .HasColumnType("decimal(10,4)");

                    b.Property<int?>("VisitorLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Visitors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("DSportEvents");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.EventAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventActions");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRoles");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.MasterEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("MasterEvents");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.UserEvent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ConnectionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("AddedById");

                    b.HasIndex("EventId");

                    b.ToTable("UserEventsSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.UserEventRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OwnershipDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AddedById");

                    b.HasIndex("RoleId");

                    b.ToTable("UserEventRolesSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<bool?>("Response")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResponseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Friends", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ConnectionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.HasIndex("RequestId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("Publish")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(999)")
                        .HasMaxLength(999);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserBook", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBookSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserEpisode", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("UserEpisodeSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserMovieSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserSeries", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("UserId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("UserSeriesSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.NotificationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "System",
                            ShortName = "Sys"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Event Manager",
                            ShortName = "EM"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plan Manager",
                            ShortName = "PM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Movie Corner",
                            ShortName = "MC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Work Manager",
                            ShortName = "WM"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImportanceLevel")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Login"
                        },
                        new
                        {
                            Id = 2,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Registration"
                        },
                        new
                        {
                            Id = 3,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Logout"
                        },
                        new
                        {
                            Id = 4,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "My Profile Updated"
                        },
                        new
                        {
                            Id = 5,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Message Arrived"
                        },
                        new
                        {
                            Id = 6,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "ToDo Added"
                        },
                        new
                        {
                            Id = 7,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "ToDo Deleted"
                        },
                        new
                        {
                            Id = 8,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "ToDo Updated"
                        },
                        new
                        {
                            Id = 9,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Created"
                        },
                        new
                        {
                            Id = 10,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Disabled"
                        },
                        new
                        {
                            Id = 11,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Published"
                        },
                        new
                        {
                            Id = 12,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Locked"
                        },
                        new
                        {
                            Id = 13,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Updated"
                        },
                        new
                        {
                            Id = 14,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Message Arrived"
                        },
                        new
                        {
                            Id = 15,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Member Invited"
                        },
                        new
                        {
                            Id = 16,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Invitation Accepted"
                        },
                        new
                        {
                            Id = 17,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Invitation Declined"
                        },
                        new
                        {
                            Id = 18,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Invited To An Event"
                        },
                        new
                        {
                            Id = 19,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Accept Event Invitation"
                        },
                        new
                        {
                            Id = 20,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Decline Event Invitation"
                        },
                        new
                        {
                            Id = 21,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Member Removed"
                        },
                        new
                        {
                            Id = 22,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Removed From An Event"
                        },
                        new
                        {
                            Id = 23,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Evolved To Sport Event"
                        },
                        new
                        {
                            Id = 24,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Evolved To GT Event"
                        },
                        new
                        {
                            Id = 25,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Date Changed"
                        },
                        new
                        {
                            Id = 26,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Added"
                        },
                        new
                        {
                            Id = 27,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Updated"
                        },
                        new
                        {
                            Id = 28,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Role Deleted"
                        },
                        new
                        {
                            Id = 29,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Added To A User"
                        },
                        new
                        {
                            Id = 30,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Role Added In An Event"
                        },
                        new
                        {
                            Id = 31,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Removed From A User"
                        },
                        new
                        {
                            Id = 32,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Role Removed In An Event"
                        },
                        new
                        {
                            Id = 33,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event ToDo Added"
                        },
                        new
                        {
                            Id = 34,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event ToDo Deleted"
                        },
                        new
                        {
                            Id = 35,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event ToDo Updated"
                        },
                        new
                        {
                            Id = 36,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Added"
                        },
                        new
                        {
                            Id = 37,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Deleted"
                        },
                        new
                        {
                            Id = 38,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Updated"
                        },
                        new
                        {
                            Id = 39,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Password Changed"
                        },
                        new
                        {
                            Id = 40,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Profile Image Changed"
                        },
                        new
                        {
                            Id = 41,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Username Changed"
                        },
                        new
                        {
                            Id = 42,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Profile Disabled"
                        },
                        new
                        {
                            Id = 43,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Received"
                        },
                        new
                        {
                            Id = 44,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Friend Request Sent"
                        },
                        new
                        {
                            Id = 45,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Accepted"
                        },
                        new
                        {
                            Id = 46,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Declined"
                        },
                        new
                        {
                            Id = 47,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "You Has a new Friend"
                        },
                        new
                        {
                            Id = 48,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Friend Removed"
                        },
                        new
                        {
                            Id = 49,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "News Added"
                        },
                        new
                        {
                            Id = 50,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "News Updated"
                        },
                        new
                        {
                            Id = 51,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "News Deleted"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.GroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 0,
                            Title = "Visitor"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            Title = "Normal"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 2,
                            Title = "Editor"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            Title = "Moderator"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 4,
                            Title = "Administrator"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 5,
                            Title = "Owner"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.MarkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.ToTable("MarkTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Responsible"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Owner"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Modifier"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Leader"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PlanTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanTypeId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("PlanGroups");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("PlanGroupChatMessages");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupIdea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.ToTable("PlanGroupIdeas");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdaterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MarkTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("MarkedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PlanTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastUpdaterId");

                    b.HasIndex("MarkTypeId");

                    b.HasIndex("MarkedUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanTypeId");

                    b.ToTable("PlanGroupPlans");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupPlanComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SenderId");

                    b.ToTable("PlanGroupPlanComments");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Future Idea"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nice To Have"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Learning"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Decision"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Event"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.UserPlanGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Connection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("AddedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserPlanGroupsSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WM.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WM.WorkingDayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DayIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WorkingDayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayIsActive = true,
                            Title = "Work Day"
                        },
                        new
                        {
                            Id = 2,
                            DayIsActive = false,
                            Title = "University"
                        },
                        new
                        {
                            Id = 3,
                            DayIsActive = false,
                            Title = "Empty Day"
                        },
                        new
                        {
                            Id = 4,
                            DayIsActive = false,
                            Title = "Holiday"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WM.WorkingField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("WorkingFields");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WebsiteRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("WebsiteRole");

                    b.HasData(
                        new
                        {
                            Id = "2f76c2fc-bbca-41ff-86ed-5ef43d41d8f9",
                            ConcurrencyStamp = "0bd23f08-6141-49f6-b9b6-8a630c38e7ac",
                            Name = "Visitor",
                            NormalizedName = "VISITOR",
                            AccessLevel = 0
                        },
                        new
                        {
                            Id = "776474d7-8d01-4809-963e-c721f39dbb45",
                            ConcurrencyStamp = "517271d4-0fc1-4e91-83fe-7e1ba2e2883d",
                            Name = "Normal",
                            NormalizedName = "NORMAL",
                            AccessLevel = 1
                        },
                        new
                        {
                            Id = "5e0a9192-793f-4c85-a0b1-3198295bf409",
                            ConcurrencyStamp = "168e567c-d7b5-4122-b7d2-ec351f8fc8ce",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR",
                            AccessLevel = 2
                        },
                        new
                        {
                            Id = "936e42dc-5d3f-4355-bc3a-304a4fe4f518",
                            ConcurrencyStamp = "68b5ce87-e347-48b3-b04e-922df4ca43bc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            AccessLevel = 3
                        },
                        new
                        {
                            Id = "fa5deb78-59c2-4faa-83dc-6c3369eedf20",
                            ConcurrencyStamp = "6cc146f2-3ed7-49ca-9876-7756d9a074bd",
                            Name = "Root",
                            NormalizedName = "ROOT",
                            AccessLevel = 4
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("ProfileImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TShirtSize")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasIndex("GenderId");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "44045506-66fd-4af8-9d59-133c47d1787c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "177b1725-a393-46e5-a2a7-a186ea022bdc",
                            Email = "karcagtamas@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KARCAGTAMAS@OUTLOOK.COM",
                            NormalizedUserName = "KARCAGTAMAS",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9SljY4ow/I7990YZ15dSGvCesg0bad3pQSWi4ekt0RT8J5JuL3lQmNJCnxo2lGIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09fd1c1d-6548-4541-92d4-a88ed0c1a0e8",
                            TwoFactorEnabled = false,
                            UserName = "karcagtamas",
                            FullName = "Karcag Tamas",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f8237fac-c6dc-47b0-8f71-b72f93368b02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b6839d9-7385-41e0-8bd2-ceb65b835b09",
                            Email = "aron.klenovszky@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARON.KLENOVSZKY@GMAIL.COM",
                            NormalizedUserName = "AARONKAA",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9QeDNFqEAq8WDl2/fXBSc02Tzxxnek963ILEw1L3aQsFysXXG4L3KvFYIVg/LpLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "185ec711-4d7d-440b-9f08-e2e799f71ba8",
                            TwoFactorEnabled = false,
                            UserName = "aaronkaa",
                            FullName = "Klenovszky Áron",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "cd5e5069-59c8-4163-95c5-776fab95e51a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78a6e6b0-62e8-4300-8cff-3ef128750411",
                            Email = "root@karcags.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@KARCAGS.HU",
                            NormalizedUserName = "ROOT",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdK+ODabrjejNLGhod4ftL37G5zT97p2g0Ck5dH9MchA2B/JFDiwb9kk9soZBPF5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7b6094a-9973-47c5-aa0b-d4192a3c86c4",
                            TwoFactorEnabled = false,
                            UserName = "root",
                            FullName = "Root",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "fa2edf69-5fc8-a163-9fc5-726f3b94e51b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2b156ae-e1dd-4647-a2a2-875b70e120e2",
                            Email = "barni.pbs@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARNI.PBS@GMAIL.COM",
                            NormalizedUserName = "BARNI363HUN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9QeDNFqEAq8WDl2/fXBSc02Tzxxnek963ILEw1L3aQsFysXXG4L3KvFYIVg/LpLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dd07869-d4d3-4bbd-9cc5-f91b4cb916d7",
                            TwoFactorEnabled = false,
                            UserName = "barni363hun",
                            FullName = "Root",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.DGtEvent", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.EM.MasterEvent", "Event")
                        .WithOne("GtEvent")
                        .HasForeignKey("ManagerAPI.Models.Entities.EM.DGtEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.DSportEvent", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.EM.MasterEvent", "Event")
                        .WithOne("SportEvent")
                        .HasForeignKey("ManagerAPI.Models.Entities.EM.DSportEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.EventAction", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.EM.MasterEvent", "Event")
                        .WithMany("Actions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("CausedEventActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.EventRole", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.EM.MasterEvent", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.MasterEvent", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedMasterEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("UpdatedMasterEvents")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.UserEvent", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "AddedBy")
                        .WithMany("AddedUsersToEvents")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.EM.MasterEvent", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.EM.UserEventRole", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "AddedBy")
                        .WithMany("AddedRolesToEvent")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.EM.EventRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("EventRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.FriendRequest", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Destination")
                        .WithMany("ReceivedFriendRequest")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "Sender")
                        .WithMany("SentFriendRequest")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Friends", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Friend")
                        .WithMany("FriendListRight")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.FriendRequest", "Request")
                        .WithMany("FriendCollection")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("FriendListLeft")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Book", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedBooks")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Episode", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Movie", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedMovies")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedMovies")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Season", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.Series", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedSeries")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedSeries")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserBook", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Book", "Book")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("MyBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserEpisode", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Episode", "Episode")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("MyEpisodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserMovie", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Movie", "Movie")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("MyMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.MC.UserSeries", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.MC.Series", "Series")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("MySeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Message", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.News", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("UpdatedNews")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Notification", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Owner")
                        .WithMany("Notifications")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.NotificationType", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.NotificationSystem", "System")
                        .WithMany("Types")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.Plan", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Owner")
                        .WithMany("Plans")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanType", "PlanType")
                        .WithMany("Plans")
                        .HasForeignKey("PlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroup", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedPlanGroups")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedPlanGroups")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupChatMessage", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanGroup", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "Sender")
                        .WithMany("SentPlanGroupChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupIdea", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Creator")
                        .WithMany("CreatedPlanGroupIdeas")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanGroup", "Group")
                        .WithMany("Ideas")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupPlan", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanGroup", "Group")
                        .WithMany("Plans")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedPlanGroupPlans")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManagerAPI.Models.Entities.PM.MarkType", "MarkType")
                        .WithMany("MarkedPlans")
                        .HasForeignKey("MarkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "MarkedUser")
                        .WithMany("MarkedOnGroupPlans")
                        .HasForeignKey("MarkedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "Owner")
                        .WithMany("CreatedPlanGroupPlans")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanType", "PlanType")
                        .WithMany("GroupPlans")
                        .HasForeignKey("PlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.PM.PlanGroupPlanComment", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanGroupPlan", "Plan")
                        .WithMany("Comments")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "Sender")
                        .WithMany("CreatedPlanGroupPlanComment")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.Task", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "Owner")
                        .WithMany("Tasks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.UserPlanGroup", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.User", "AddedBy")
                        .WithMany("AddedUsersToGroups")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.PM.PlanGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.PM.GroupRole", "Role")
                        .WithMany("GroupMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WM.WorkingDay", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.WM.WorkingDayType", "Type")
                        .WithMany("WorkingDays")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Models.Entities.User", "User")
                        .WithMany("WorkingDays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.WM.WorkingField", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.WM.WorkingDay", "WorkingDay")
                        .WithMany("WorkingFields")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Models.Entities.User", b =>
                {
                    b.HasOne("ManagerAPI.Models.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
