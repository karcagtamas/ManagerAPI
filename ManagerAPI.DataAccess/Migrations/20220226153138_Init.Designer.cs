// <auto-generated />
using System;
using ManagerAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagerAPI.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220226153138_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.Csomor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasGeneratedCsomor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastGeneration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MaxWorkHour")
                        .HasColumnType("int");

                    b.Property<int>("MinRestHour")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdaterId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Csomors");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CsomorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("PlusWorkCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CsomorId");

                    b.ToTable("CsomorPersons");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorPersonTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorkId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkId");

                    b.ToTable("CsomorPersonTables");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorWork", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CsomorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CsomorId");

                    b.ToTable("CsomorWorks");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorWorkTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorkId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkId");

                    b.ToTable("CsomorWorkTables");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.IgnoredWork", b =>
                {
                    b.Property<string>("PersonId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorkId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PersonId", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("IgnoredWorks");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.UserCsomor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CsomorId")
                        .HasColumnType("int");

                    b.Property<bool>("HasWriteAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("SharedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("UserId", "CsomorId");

                    b.HasIndex("CsomorId");

                    b.ToTable("SharedCsomors");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool?>("Response")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ResponseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Friends", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FriendId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ConnectionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.HasIndex("RequestId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.NotificationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "System",
                            ShortName = "Sys"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Event Manager",
                            ShortName = "EM"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plan Manager",
                            ShortName = "PM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Status Library",
                            ShortName = "SL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Work Manager",
                            ShortName = "WM"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ImportanceLevel")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Login"
                        },
                        new
                        {
                            Id = 2,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Registration"
                        },
                        new
                        {
                            Id = 3,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Logout"
                        },
                        new
                        {
                            Id = 4,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "My Profile Updated"
                        },
                        new
                        {
                            Id = 5,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Message Arrived"
                        },
                        new
                        {
                            Id = 6,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "ToDo Added"
                        },
                        new
                        {
                            Id = 7,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "ToDo Deleted"
                        },
                        new
                        {
                            Id = 8,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "ToDo Updated"
                        },
                        new
                        {
                            Id = 9,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Created"
                        },
                        new
                        {
                            Id = 10,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Disabled"
                        },
                        new
                        {
                            Id = 11,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Published"
                        },
                        new
                        {
                            Id = 12,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Locked"
                        },
                        new
                        {
                            Id = 13,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Updated"
                        },
                        new
                        {
                            Id = 14,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Message Arrived"
                        },
                        new
                        {
                            Id = 15,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Member Invited"
                        },
                        new
                        {
                            Id = 16,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Invitation Accepted"
                        },
                        new
                        {
                            Id = 17,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Invitation Declined"
                        },
                        new
                        {
                            Id = 18,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Invited To An Event"
                        },
                        new
                        {
                            Id = 19,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Accept Event Invitation"
                        },
                        new
                        {
                            Id = 20,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Decline Event Invitation"
                        },
                        new
                        {
                            Id = 21,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Member Removed"
                        },
                        new
                        {
                            Id = 22,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Removed From An Event"
                        },
                        new
                        {
                            Id = 23,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Evolved To Sport Event"
                        },
                        new
                        {
                            Id = 24,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Evolved To GT Event"
                        },
                        new
                        {
                            Id = 25,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event Date Changed"
                        },
                        new
                        {
                            Id = 26,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Added"
                        },
                        new
                        {
                            Id = 27,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Updated"
                        },
                        new
                        {
                            Id = 28,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event Role Deleted"
                        },
                        new
                        {
                            Id = 29,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Added To A User"
                        },
                        new
                        {
                            Id = 30,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Role Added In An Event"
                        },
                        new
                        {
                            Id = 31,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event Role Removed From A User"
                        },
                        new
                        {
                            Id = 32,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Role Removed In An Event"
                        },
                        new
                        {
                            Id = 33,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event ToDo Added"
                        },
                        new
                        {
                            Id = 34,
                            ImportanceLevel = 2,
                            SystemId = 2,
                            Title = "Event ToDo Deleted"
                        },
                        new
                        {
                            Id = 35,
                            ImportanceLevel = 1,
                            SystemId = 2,
                            Title = "Event ToDo Updated"
                        },
                        new
                        {
                            Id = 36,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Added"
                        },
                        new
                        {
                            Id = 37,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Deleted"
                        },
                        new
                        {
                            Id = 38,
                            ImportanceLevel = 3,
                            SystemId = 2,
                            Title = "Event PayOut Updated"
                        },
                        new
                        {
                            Id = 39,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Password Changed"
                        },
                        new
                        {
                            Id = 40,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Profile Image Changed"
                        },
                        new
                        {
                            Id = 41,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Username Changed"
                        },
                        new
                        {
                            Id = 42,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Profile Disabled"
                        },
                        new
                        {
                            Id = 43,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Received"
                        },
                        new
                        {
                            Id = 44,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Friend Request Sent"
                        },
                        new
                        {
                            Id = 45,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Accepted"
                        },
                        new
                        {
                            Id = 46,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Friend Request Declined"
                        },
                        new
                        {
                            Id = 47,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "You Has a new Friend"
                        },
                        new
                        {
                            Id = 48,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Friend Removed"
                        },
                        new
                        {
                            Id = 49,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "News Added"
                        },
                        new
                        {
                            Id = 50,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "News Updated"
                        },
                        new
                        {
                            Id = 51,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "News Deleted"
                        },
                        new
                        {
                            Id = 52,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Field Added"
                        },
                        new
                        {
                            Id = 53,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Field Deleted"
                        },
                        new
                        {
                            Id = 54,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Field Updated"
                        },
                        new
                        {
                            Id = 55,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Day Added"
                        },
                        new
                        {
                            Id = 56,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Day Deleted"
                        },
                        new
                        {
                            Id = 57,
                            ImportanceLevel = 1,
                            SystemId = 5,
                            Title = "Working Day Updated"
                        },
                        new
                        {
                            Id = 58,
                            ImportanceLevel = 2,
                            SystemId = 5,
                            Title = "Working Day Type Added"
                        },
                        new
                        {
                            Id = 59,
                            ImportanceLevel = 3,
                            SystemId = 5,
                            Title = "Working Day Type Deleted"
                        },
                        new
                        {
                            Id = 60,
                            ImportanceLevel = 2,
                            SystemId = 5,
                            Title = "Working Day Type Updated"
                        },
                        new
                        {
                            Id = 61,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Message Added"
                        },
                        new
                        {
                            Id = 62,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Message Deleted"
                        },
                        new
                        {
                            Id = 63,
                            ImportanceLevel = 1,
                            SystemId = 1,
                            Title = "Message Updated"
                        },
                        new
                        {
                            Id = 64,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Gender Added"
                        },
                        new
                        {
                            Id = 65,
                            ImportanceLevel = 3,
                            SystemId = 1,
                            Title = "Gender Deleted"
                        },
                        new
                        {
                            Id = 66,
                            ImportanceLevel = 2,
                            SystemId = 1,
                            Title = "Gender Updated"
                        },
                        new
                        {
                            Id = 67,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Movie Added"
                        },
                        new
                        {
                            Id = 68,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Movie Deleted"
                        },
                        new
                        {
                            Id = 69,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Movie Updated"
                        },
                        new
                        {
                            Id = 70,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Book Added"
                        },
                        new
                        {
                            Id = 71,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Book Deleted"
                        },
                        new
                        {
                            Id = 72,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Book Updated"
                        },
                        new
                        {
                            Id = 73,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Book Read Status Updated"
                        },
                        new
                        {
                            Id = 74,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "My Book List Updated"
                        },
                        new
                        {
                            Id = 75,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Movie Seen Status Updated"
                        },
                        new
                        {
                            Id = 76,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "My Movie List Updated"
                        },
                        new
                        {
                            Id = 77,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Series Added"
                        },
                        new
                        {
                            Id = 78,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Series Deleted"
                        },
                        new
                        {
                            Id = 79,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Series Updated"
                        },
                        new
                        {
                            Id = 80,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "My Series List Updated"
                        },
                        new
                        {
                            Id = 81,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Season Added"
                        },
                        new
                        {
                            Id = 82,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Season Deleted"
                        },
                        new
                        {
                            Id = 83,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Season Updated"
                        },
                        new
                        {
                            Id = 84,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Episode Added"
                        },
                        new
                        {
                            Id = 85,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Episode Deleted"
                        },
                        new
                        {
                            Id = 86,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Episode Updated"
                        },
                        new
                        {
                            Id = 87,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Episode Seen Status Updated"
                        },
                        new
                        {
                            Id = 88,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Series Seen Status Updated"
                        },
                        new
                        {
                            Id = 89,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Season Seen Status Updated"
                        },
                        new
                        {
                            Id = 90,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Movie Category Added"
                        },
                        new
                        {
                            Id = 91,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Movie Category Deleted"
                        },
                        new
                        {
                            Id = 92,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Movie Category Updated"
                        },
                        new
                        {
                            Id = 93,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Movie Comment Added"
                        },
                        new
                        {
                            Id = 94,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Movie Comment Deleted"
                        },
                        new
                        {
                            Id = 95,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Movie Comment Updated"
                        },
                        new
                        {
                            Id = 96,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Series Category Added"
                        },
                        new
                        {
                            Id = 97,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Series Category Deleted"
                        },
                        new
                        {
                            Id = 98,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Series Category Updated"
                        },
                        new
                        {
                            Id = 99,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Series Comment Added"
                        },
                        new
                        {
                            Id = 100,
                            ImportanceLevel = 2,
                            SystemId = 4,
                            Title = "Series Comment Deleted"
                        },
                        new
                        {
                            Id = 101,
                            ImportanceLevel = 1,
                            SystemId = 4,
                            Title = "Series Comment Updated"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("Publish")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdaterId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(999)
                        .HasColumnType("varchar(999)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.ToTable("MovieCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romantic"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-fi"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieMovieCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MovieMovieCategorySwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(999)
                        .HasColumnType("varchar(999)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdaterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.ToTable("SeriesCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romantic"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-fi"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("SeriesComments");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesSeriesCategory", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SeriesSeriesCategoriesSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserBook", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBookSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserEpisode", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("UserEpisodeSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserMovieSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserSeries", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("UserSeriesSwitch");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingDayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("DayIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkingDayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayIsActive = true,
                            Title = "Work Day"
                        },
                        new
                        {
                            Id = 2,
                            DayIsActive = false,
                            Title = "University"
                        },
                        new
                        {
                            Id = 3,
                            DayIsActive = false,
                            Title = "Empty Day"
                        },
                        new
                        {
                            Id = 4,
                            DayIsActive = false,
                            Title = "Holiday"
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("WorkingFields");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Allergy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<byte[]>("ProfileImageData")
                        .HasColumnType("longblob");

                    b.Property<string>("ProfileImageTitle")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("SecondaryEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TShirtSize")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasIndex("GenderId");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "44045506-66fd-4af8-9d59-133c47d1787c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cf836a7-842c-41fe-902a-5e9f86fc5260",
                            Email = "karcagtamas@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KARCAGTAMAS@OUTLOOK.COM",
                            NormalizedUserName = "KARCAGTAMAS",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9SljY4ow/I7990YZ15dSGvCesg0bad3pQSWi4ekt0RT8J5JuL3lQmNJCnxo2lGIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "142b7322-39d8-4cb3-8816-582511857fa5",
                            TwoFactorEnabled = false,
                            UserName = "karcagtamas",
                            Allergy = "",
                            City = "",
                            Country = "",
                            FullName = "Karcag Tamas",
                            GenderId = 1,
                            Group = "",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileImageTitle = "",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecondaryEmail = "",
                            TShirtSize = ""
                        },
                        new
                        {
                            Id = "cd5e5069-59c8-4163-95c5-776fab95e51a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8707df4b-1c0e-4b65-84e0-a4996c4fa221",
                            Email = "root@karcags.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@KARCAGS.HU",
                            NormalizedUserName = "ROOT",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdK+ODabrjejNLGhod4ftL37G5zT97p2g0Ck5dH9MchA2B/JFDiwb9kk9soZBPF5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f89f79b1-1cf1-43df-87a0-642dcee56552",
                            TwoFactorEnabled = false,
                            UserName = "root",
                            Allergy = "",
                            City = "",
                            Country = "",
                            FullName = "Root",
                            Group = "",
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileImageTitle = "",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecondaryEmail = "",
                            TShirtSize = ""
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WebsiteRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("WebsiteRole");

                    b.HasData(
                        new
                        {
                            Id = "2f76c2fc-bbca-41ff-86ed-5ef43d41d8f9",
                            ConcurrencyStamp = "63868519-e55d-480e-b291-c681bfdb95f0",
                            Name = "Visitor",
                            NormalizedName = "VISITOR",
                            AccessLevel = 0
                        },
                        new
                        {
                            Id = "776474d7-8d01-4809-963e-c721f39dbb45",
                            ConcurrencyStamp = "acdc1508-d372-4765-8d83-593d6b53d1c0",
                            Name = "Normal",
                            NormalizedName = "NORMAL",
                            AccessLevel = 1
                        },
                        new
                        {
                            Id = "5e0a9192-793f-4c85-a0b1-3198295bf409",
                            ConcurrencyStamp = "83b020fb-c887-4d2d-b673-eb3989c76494",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR",
                            AccessLevel = 2
                        },
                        new
                        {
                            Id = "936e42dc-5d3f-4355-bc3a-304a4fe4f518",
                            ConcurrencyStamp = "830bd94e-6014-442b-a4e6-cb018c2f374e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            AccessLevel = 3
                        },
                        new
                        {
                            Id = "936e4ddc-5d3f-4355-af3a-304a4fe4f518",
                            ConcurrencyStamp = "bd6f4de5-29ad-42b3-8f6b-9b9cc01cd1ce",
                            Name = "Status Library User",
                            NormalizedName = "STATUS LIBRARY USER",
                            AccessLevel = 1
                        },
                        new
                        {
                            Id = "936e4ddc-5d3f-5466-af3a-3b4a4424d518",
                            ConcurrencyStamp = "b3f06b57-7dba-4edb-8ba9-e4369f32eb11",
                            Name = "Status Library Moderator",
                            NormalizedName = "STATUS LIBRARY MODERATOR",
                            AccessLevel = 3
                        },
                        new
                        {
                            Id = "936d4dfc-5536-4d5f-af2a-304d4fe4f518",
                            ConcurrencyStamp = "1f25781a-1620-4cb2-aa41-1f48344c8358",
                            Name = "Status Library Administrator",
                            NormalizedName = "STATUS LIBRARY ADMINISTRATOR",
                            AccessLevel = 3
                        },
                        new
                        {
                            Id = "fa5deb78-59c2-4faa-83dc-6c3369eedf20",
                            ConcurrencyStamp = "7404ea79-d1b4-465f-8ed5-dacfed36e2d3",
                            Name = "Root",
                            NormalizedName = "ROOT",
                            AccessLevel = 4
                        });
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.Csomor", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedCsomors")
                        .HasForeignKey("LastUpdaterId")
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "Owner")
                        .WithMany("OwnedCsomors")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("LastUpdater");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorPerson", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.Csomor", "Csomor")
                        .WithMany("Persons")
                        .HasForeignKey("CsomorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Csomor");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorPersonTable", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorPerson", "Person")
                        .WithMany("Tables")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorWork", "Work")
                        .WithMany("Persons")
                        .HasForeignKey("WorkId")
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorWork", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.Csomor", "Csomor")
                        .WithMany("Works")
                        .HasForeignKey("CsomorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Csomor");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorWorkTable", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorPerson", "Person")
                        .WithMany("Works")
                        .HasForeignKey("PersonId")
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorWork", "Work")
                        .WithMany("Tables")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.IgnoredWork", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorPerson", "Person")
                        .WithMany("IgnoredWorks")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.CSM.CsomorWork", "Work")
                        .WithMany("IgnoringPersons")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.UserCsomor", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.CSM.Csomor", "Csomor")
                        .WithMany("SharedWith")
                        .HasForeignKey("CsomorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("SharedCsomors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Csomor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.FriendRequest", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Destination")
                        .WithMany("ReceivedFriendRequest")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "Sender")
                        .WithMany("SentFriendRequest")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Friends", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Friend")
                        .WithMany("FriendListRight")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.FriendRequest", "Request")
                        .WithMany("FriendCollection")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("FriendListLeft")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Message", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.News", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Creator")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("UpdatedNews")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastUpdater");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Owner")
                        .WithMany("Notifications")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.NotificationType", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.NotificationSystem", "System")
                        .WithMany("Types")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Book", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Creator")
                        .WithMany("CreatedBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedBooks")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastUpdater");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Episode", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedEpisodes")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.SL.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastUpdater");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Movie", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Creator")
                        .WithMany("CreatedMovies")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedMovies")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastUpdater");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieComment", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("MovieComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieMovieCategory", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.MovieCategory", "Category")
                        .WithMany("ConnectedMovies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.SL.Movie", "Movie")
                        .WithMany("Categories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Season", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Series", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Creator")
                        .WithMany("CreatedSeries")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "LastUpdater")
                        .WithMany("LastUpdatedSeries")
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastUpdater");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesComment", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Series", "Series")
                        .WithMany("Comments")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("SeriesComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesSeriesCategory", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.SeriesCategory", "Category")
                        .WithMany("ConnectedSeriesList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.SL.Series", "Series")
                        .WithMany("Categories")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserBook", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Book", "Book")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("MyBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserEpisode", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Episode", "Episode")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("MyEpisodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserMovie", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Movie", "Movie")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("MyMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.UserSeries", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.SL.Series", "Series")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("MySeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Task", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.User", "Owner")
                        .WithMany("Tasks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingDay", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.WM.WorkingDayType", "Type")
                        .WithMany("WorkingDays")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagerAPI.Domain.Entities.User", "User")
                        .WithMany("WorkingDays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingField", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.WM.WorkingDay", "WorkingDay")
                        .WithMany("WorkingFields")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("ManagerAPI.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.Csomor", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("SharedWith");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorPerson", b =>
                {
                    b.Navigation("IgnoredWorks");

                    b.Navigation("Tables");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.CSM.CsomorWork", b =>
                {
                    b.Navigation("IgnoringPersons");

                    b.Navigation("Persons");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.FriendRequest", b =>
                {
                    b.Navigation("FriendCollection");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.NotificationSystem", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Book", b =>
                {
                    b.Navigation("ConnectedUsers");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Episode", b =>
                {
                    b.Navigation("ConnectedUsers");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Movie", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("ConnectedUsers");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.MovieCategory", b =>
                {
                    b.Navigation("ConnectedMovies");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.Series", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("ConnectedUsers");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.SL.SeriesCategory", b =>
                {
                    b.Navigation("ConnectedSeriesList");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingDay", b =>
                {
                    b.Navigation("WorkingFields");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.WM.WorkingDayType", b =>
                {
                    b.Navigation("WorkingDays");
                });

            modelBuilder.Entity("ManagerAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedBooks");

                    b.Navigation("CreatedMovies");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedSeries");

                    b.Navigation("FriendListLeft");

                    b.Navigation("FriendListRight");

                    b.Navigation("LastUpdatedBooks");

                    b.Navigation("LastUpdatedCsomors");

                    b.Navigation("LastUpdatedEpisodes");

                    b.Navigation("LastUpdatedMovies");

                    b.Navigation("LastUpdatedSeries");

                    b.Navigation("MovieComments");

                    b.Navigation("MyBooks");

                    b.Navigation("MyEpisodes");

                    b.Navigation("MyMovies");

                    b.Navigation("MySeries");

                    b.Navigation("Notifications");

                    b.Navigation("OwnedCsomors");

                    b.Navigation("ReceivedFriendRequest");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentFriendRequest");

                    b.Navigation("SentMessages");

                    b.Navigation("SeriesComments");

                    b.Navigation("SharedCsomors");

                    b.Navigation("Tasks");

                    b.Navigation("UpdatedNews");

                    b.Navigation("WorkingDays");
                });
#pragma warning restore 612, 618
        }
    }
}
